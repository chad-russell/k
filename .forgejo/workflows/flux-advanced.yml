name: Advanced Flux GitOps

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Flux action to perform"
        required: true
        default: "reconcile-all"
        type: choice
        options:
          - reconcile-all
          - reconcile-apps
          - reconcile-infra
          - check-health
          - force-sync
          - get-status
      dry_run:
        description: "Dry run mode"
        required: false
        default: false
        type: boolean

env:
  FLUX_SYSTEM_NAMESPACE: flux-system

jobs:
  validate:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flux CLI
        run: |
          if ! command -v flux &> /dev/null; then
            curl -s https://fluxcd.io/install.sh | sudo bash
          fi
          flux --version

      - name: Setup SOPS
        run: |
          if ! command -v sops &> /dev/null; then
            # Install SOPS
            SOPS_VERSION="3.8.1"
            curl -LO "https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64"
            sudo mv sops-v${SOPS_VERSION}.linux.amd64 /usr/local/bin/sops
            sudo chmod +x /usr/local/bin/sops
          fi
          sops --version

      - name: Validate Kubernetes manifests
        run: |
          echo "üîç Validating Kubernetes manifests..."

          # Check for basic YAML syntax
          find . -name "*.yaml" -o -name "*.yml" | while read -r file; do
            if [[ "$file" == *"secrets.yaml" ]]; then
              echo "‚è≠Ô∏è Skipping encrypted file: $file"
              continue
            fi
            
            echo "Checking: $file"
            if ! yq eval '.' "$file" > /dev/null 2>&1; then
              echo "‚ùå Invalid YAML: $file"
              exit 1
            fi
          done

      - name: Flux validation
        run: |
          echo "üîç Running Flux validation..."
          flux check --pre

          # Validate Flux manifests
          find . -path "./flux-system/*" -name "*.yaml" | while read -r file; do
            echo "Validating Flux manifest: $file"
            flux validate "$file"
          done

      - name: SOPS validation
        run: |
          echo "üîç Validating SOPS encrypted files..."
          find . -name "secrets.yaml" | while read -r file; do
            echo "Checking SOPS file: $file"
            if ! sops --decrypt "$file" > /dev/null 2>&1; then
              echo "‚ùå Cannot decrypt SOPS file: $file"
              exit 1
            else
              echo "‚úÖ SOPS file valid: $file"
            fi
          done

  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          # Setup Flux CLI
          if ! command -v flux &> /dev/null; then
            curl -s https://fluxcd.io/install.sh | sudo bash
          fi

          # Setup kubectl (if not already available)
          if ! command -v kubectl &> /dev/null; then
            echo "‚ùå kubectl not found. Please ensure kubectl is available on the runner."
            exit 1
          fi

          flux --version
          kubectl version --client

      - name: Check cluster connectivity
        run: |
          echo "üîó Checking cluster connectivity..."
          kubectl cluster-info
          kubectl get nodes

      - name: Reconcile Flux System
        run: |
          echo "üöÄ Reconciling Flux system..."
          flux reconcile source git flux-system
          flux reconcile kustomization flux-system

          # Wait for reconciliation
          echo "‚è≥ Waiting for Flux system reconciliation..."
          kubectl wait --for=condition=Ready kustomization/flux-system -n flux-system --timeout=300s

      - name: Reconcile Applications
        run: |
          echo "üöÄ Reconciling applications..."

          # Get all kustomizations
          KUSTOMIZATIONS=$(kubectl get kustomizations -A -o jsonpath='{range .items[*]}{.metadata.namespace}{" "}{.metadata.name}{"\n"}{end}')

          while IFS= read -r line; do
            if [ -n "$line" ]; then
              NAMESPACE=$(echo "$line" | awk '{print $1}')
              NAME=$(echo "$line" | awk '{print $2}')
              
              echo "üì¶ Reconciling kustomization: $NAMESPACE/$NAME"
              flux reconcile kustomization "$NAME" -n "$NAMESPACE" || echo "‚ö†Ô∏è Failed to reconcile $NAMESPACE/$NAME"
            fi
          done <<< "$KUSTOMIZATIONS"

      - name: Check deployment status
        run: |
          echo "üìä Checking deployment status..."
          flux get all

          echo "üè• Checking pod health..."
          kubectl get pods --all-namespaces | grep -E "(Error|CrashLoopBackOff|ImagePullBackOff)" || echo "‚úÖ No problematic pods found"

  manual-operations:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          if ! command -v flux &> /dev/null; then
            curl -s https://fluxcd.io/install.sh | sudo bash
          fi
          flux --version

      - name: Execute manual action
        run: |
          echo "üéØ Executing manual action: ${{ github.event.inputs.action }}"

          DRY_RUN_FLAG=""
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            DRY_RUN_FLAG="--dry-run"
            echo "üß™ Running in dry-run mode"
          fi

          case "${{ github.event.inputs.action }}" in
            reconcile-all)
              echo "üöÄ Reconciling all resources..."
              flux reconcile kustomization flux-system --with-source $DRY_RUN_FLAG
              kubectl get kustomizations -A -o name | while read -r kustomization; do
                NAMESPACE=$(echo "$kustomization" | cut -d'/' -f1 | cut -d'.' -f2)
                NAME=$(echo "$kustomization" | cut -d'/' -f2)
                flux reconcile kustomization "$NAME" -n "$NAMESPACE" $DRY_RUN_FLAG || true
              done
              ;;
            reconcile-apps)
              echo "üì± Reconciling applications..."
              flux reconcile kustomization apps $DRY_RUN_FLAG || echo "‚ö†Ô∏è Apps kustomization not found"
              ;;
            reconcile-infra)
              echo "üèóÔ∏è Reconciling infrastructure..."
              flux reconcile kustomization flux-system --with-source $DRY_RUN_FLAG
              ;;
            check-health)
              echo "üè• Checking system health..."
              flux check
              flux get all
              kubectl get pods --all-namespaces | grep -E "(Error|CrashLoopBackOff|ImagePullBackOff)" || echo "‚úÖ All pods healthy"
              ;;
            force-sync)
              echo "üîÑ Force syncing all resources..."
              flux suspend kustomization flux-system
              sleep 5
              flux resume kustomization flux-system
              flux reconcile kustomization flux-system --with-source
              ;;
            get-status)
              echo "üìä Getting comprehensive status..."
              flux get all
              kubectl get all --all-namespaces
              ;;
          esac

      - name: Final status report
        if: always()
        run: |
          echo "üìà Final status report:"
          flux get kustomizations
          flux get helmreleases --all-namespaces

          echo "üîç Recent events:"
          kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -20
